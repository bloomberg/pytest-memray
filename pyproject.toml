[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs>=0.3",
  "hatchling>=1.18",
]

[project]
name = "pytest-memray"
description = "A simple plugin to use with pytest"
readme.content-type = "text/markdown"
readme.file = "README.md"
license = "apache-2.0"
maintainers = [
  { name = "Pablo Galindo Salgado", email = "pgalindo3@bloomberg.net" },
]
authors = [
  { name = "Pablo Galindo Salgado", email = "pgalindo3@bloomberg.net" },
]
requires-python = ">=3.8"
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Debuggers",
]
dynamic = [
  "version",
]
dependencies = [
  "memray>=1.8",
  "pytest>=7.3.2",
]
optional-dependencies.docs = [
  "furo>=2023.5.20",
  "sphinx>=7.0.1",
  "sphinx-argparse>=0.4",
  "sphinx-inline-tabs>=2023.4.21",
  "sphinxcontrib-programoutput>=0.17",
  "towncrier>=23.6",
]
optional-dependencies.lint = [
  "black==23.3",
  "mypy==1.3",
  "ruff==0.0.272",
]
optional-dependencies.test = [
  "covdefaults>=2.3",
  "coverage>=7.2.7",
  "flaky>=3.7",
  "pytest>=7.3.2",
  "pytest-xdist>=3.3.1",
]
urls."Bug Tracker" = "https://github.com/bloomberg/pytest-memray/issues"
urls.Documentation = "https://pytest-memray.readthedocs.io"
urls."Source Code" = "https://github.com/bloomberg/pytest-memray"
[project.entry-points.pytest11]
memray = "pytest_memray.plugin"

[tool.hatch]
build.dev-mode-dirs = ["src"]
build.hooks.vcs.version-file = "src/pytest_memray/_version.py"
build.hooks.vcs.template = "__version__ = \"{version}\"\n"
version.source = "vcs"
build.targets.sdist.include = ["/Makefile", "/tox.ini", "/src", "/tests", "/docs"]

[tool.black]
line-length = 88

[tool.coverage]
run.dynamic_context = "test_function"
run.source = ["pytest_memray", "tests"]
run.plugins = ["covdefaults"]
run.parallel = true
report.fail_under = 97
html.show_contexts = true
html.skip_covered = false
paths.source = [
  "src",
  ".tox*/*/lib/python*/site-packages",
  ".tox*/pypy*/site-packages",
  ".tox*\\*\\Lib\\site-packages",
  "*/src",
  "*\\src",
]

[tool.mypy]
python_version = "3.8"
show_error_codes = true
strict = true

[tool.towncrier]
name = "pytest-memray"
filename = "docs/news.rst"
directory = "docs/news"
title_format = false
issue_format = ":issue:`{issue}`"
template = "docs/news/template.jinja2"
type = [
  { name = "Features", directory = "feature", showcontent = true },
  { name = "Deprecations and Removals", directory = "removal", showcontent = true },
  { name = "Bug Fixes", directory = "bugfix", showcontent = true },
  { name = "Improved Documentation", directory = "doc", showcontent = true },
  { name = "Miscellaneous", directory = "misc", showcontent = true },
]

[tool.ruff]
select = ["ALL"]
line-length = 88
target-version = "py38"
isort = {known-first-party = ["pytest_memray"], required-imports = ["from __future__ import annotations"]}
ignore = [
  "ANN401",  # dynamically typed expression
  "D",  # documentation not always applied
  "ANN101",  # self type annotation
  "D203",  # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible
  "D212",  # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible
  "S104",  # Possible binding to all interface
]
[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
  "S101",  # asserts allowed in tests...
  "FBT",  # don"t care about booleans as positional arguments in tests
  "INP001", # no implicit namespace
  "D",  # don"t care about documentation in tests
  "S603",  # `subprocess` call: check for execution of untrusted input
  "PLR2004",  # Magic value used in comparison, consider replacing with a constant variable
]
"src/pytest_memray/_version.py" = ["I002"]  # Missing required import: `from __future__ import annotations
